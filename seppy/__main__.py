import argparse
import sys
from pathlib import Path
from rich.console import Console
from rich.logging import RichHandler
import logging

from .core import Seppy
from .config import DEFAULT_CONFIG
from .exceptions import ScriptSplitterError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(message)s",
    datefmt="[%X]",
    handlers=[RichHandler(rich_tracebacks=True)]
)

logger = logging.getLogger("seppy")
console = Console()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É."""
    parser = argparse.ArgumentParser(
        description="Seppy - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è Python —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ –º–æ–¥—É–ª–∏"
    )
    parser.add_argument(
        "source_file",
        help="–ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É Python —Ñ–∞–π–ª—É"
    )
    parser.add_argument(
        "-o", "--output",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: output)",
        default="output"
    )
    parser.add_argument(
        "-c", "--config",
        help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (JSON –∏–ª–∏ YAML)"
    )
    parser.add_argument(
        "-m", "--memory-limit",
        type=int,
        help="–õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ –≤ –ú–ë"
    )
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )

    args = parser.parse_args()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.verbose:
        logger.setLevel(logging.DEBUG)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        source_path = Path(args.source_file)
        if not source_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.source_file}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Seppy
        splitter = Seppy(
            source_file=str(source_path),
            config_file=args.config,
            memory_limit_mb=args.memory_limit
        )
        
        # –ê–Ω–∞–ª–∏–∑ –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–ø—Ç–∞...")
        modules = splitter.parse_script(str(source_path))
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(modules)} –º–æ–¥—É–ª–µ–π")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        output_path = Path(args.output)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥—É–ª–∏ –≤ {output_path}...")
        splitter.save_modules(str(output_path))
        
        logger.info("–ì–æ—Ç–æ–≤–æ! üéâ")
        return 0
        
    except FileNotFoundError as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        return 1
    except ScriptSplitterError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        return 1
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 